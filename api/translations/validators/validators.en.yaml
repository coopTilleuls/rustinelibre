# User assert validation messages
#Email
user.email.not_blank: Please enter an email address.
user.email.length: The email address cannot be longer than 180 characters.
user.email.valid: Please enter a valid email address.
user.email.unique: There is already an account with this email address.

#Password
user.password.regex: The password must contain 12 characters, a capital letter, a special character and numbers.

#LastName
user.lastName.min_length: The lastName must contain at least 2 characters.
user.lastName.max_length: The lastName can contain 50 characters maximum.
user.lastName.not_blank: Please enter a lastName.

#FirstName
user.firstName.min_length: The firstName must contain at least 2 characters.
user.firstName.max_length: The firstName can contain 50 characters maximum.
user.firstName.not_blank: Please enter a firstName.

# Appointment assert validation messages
#Repairer
appointment.repairer.not_blank: Appointment should have a repairer.

#SlotTime
appointment.slotTime.not_blank: Appointment should have a selected slotTime.
appointment.slotTime.greater_than: Appointment's slotTime should be greater than {{ compared_value }}.
appointment.slotTime.identical: New Appointment is equal to the old one.

#Appointment State
appointment.state.status: This state is not a valid status.

# AutoDiagnostic assert validation messages
autoDiagnostic.appointment.owner: This appointment does not belong to you.

#Bike assert validation messages
bike.owner: The bike should be your bike to modify it, or have at least an appointment with the bike owner.

#Bike-type assert validation messages
#Name
bikeType.name.not_blank: Bike-type must have a name.
bikeType.name.min_length: Bike-type name must contain at least 2 characters.
bikeType.name.max_length: Bike-type name can contain 100 characters maximum.

# Contact assert validation messages (same message thant user for "email", "lastName" and "firstName")
#Content
contact.content.not_blank: The message content cannot be empty.
contact.content.min_length: The message content must contain at least 10 characters.
contact.content.max_length: The message content can contain 1000 characters maximum.

#Discussion assert validation messages
#Repairer
discussion.repairer.not_null: Discussion's repairer is missing.
#Customer
discussion.customer.not_null: Discussion's customer is missing.
#Unique Discussion
discussion.unique: A discussion already exists between this repairer and customer, you cannot create an other.

#Discussion message assert validation messages
#Discussion
discussion.message.discussion: Message should be related to a discussion.
#Content
discussion.message.content.not_blank: The message content cannot be empty.
discussion.message.content.max_length: The message content can contain 1000 characters maximum.


#MediaObject assert validation messages
mediaObject.file.not_null: Please add a file.
mediaObject.file.image.format: Only images with .jpeg, .jpg, .png ou .webp format are accepted.
mediaObject.file.file.format: Only files with .pdf, .doc, .docx, .odt, .xls ou .csv format are accepted.
mediaObject.file.maxSize: The file should not exceed 5MB.
mediaObject.visibility.not_valid: The visibility can only be "public" or "private".

#Repairer assert validation messages
#PlainPassword
repairer.plainPassword.notBlank: Please enter a password.
#Name
repairer.name.not_blank: Please enter a repairer name.
repairer.name.min_length: Repairer name must contain at least 2 characters.
repairer.name.max_length: Repairer name can contain 80 characters maximum.
#City
repairer.city.not_blank: Please enter a city.
repairer.street.not_blank: Please enter a street name.
repairer.street.number.not_blank: Please enter a street number.
repairer.postcode.not_blank: Please enter a postcode.
#Number of slots
repairer.number_of_slots.range: You must have a number of slots between {{ min }} and {{ max }}.

#RepairerIntervention assert validation messages
repairerIntervention.intervention: Please enter an intervention.

#RepairerOpeningHours
repairer.openingHours.format: Please enter opening hours on format "hh:mm" with minutes like "00" or "30".

#RepairerType
repairerType.name.not_blank: Please enter a Repairer-type.
repairerType.name.min_length: Repairer-type name must contain at least 2 characters.
repairerType.name.max_length: Repairer-type name can contain 50 characters maximum.

#Maintenance can write assert validation messages
maintenance.writer: You cannot write a new maintenance intervention for this bike, you should be the bike owner, or have at least an appointment with the bike owner.


#Repairer Closing
repairer.closing.valid_date: The endDate cannot be before startDate.
#Repairer Opening
repairer.opening.valid_days: This day is not available, should be one of monday, tuesday, wednesday, thursday, friday, saturday, sunday.
repairer.opening.valid_time: The endTime cannot be before startTime.
repairer.opening.overlapped: The hours are overlapped.
#Repairer slot
repairer.duration.slot: The duration slot should be one of 30 / 60 / 180 (min).

#Access Denied Exceptions
403_access.denied.role: You don't have permissions to access to this space.
403_access.denied.logged: You have to be logged to access to this space.
403_access.denied.validation.code: This validation code is not valid.
403_access.denied.repairer.intervention.link: You need to have a repairer profile to link to an intervention.
403_access.denied.admin.intervention.link: You can only link repairers to interventions created by admin.
403_access.denied.repairer.belong.shop: You should belong a shop to create an appointment.
403_access.denied.repairer.shop.owner: This shop is not yours.
403_access.denied.customer: This user is not one of your customer.


#Bad Request Exceptions
400_badRequest.file.required: file is required.
400_badRequest.add.employee: You cannot add en employee if you dont have any repairer shop.
400_badRequest.update.employee: You should provide a 'repairer employee' ID to update it.
400_badRequest.repairer.employee.not.exist: this 'repairer employee' does not exist.
400_badRequest.intervention.price: Price is required.
400_badRequest.repairer.create.intervention: You must have a repairer to create an intervention.
400_badRequest.slot.not.available: This slot is not available.
400_badRequest.availability.filter: The "availability" filter accepts only "ASC" or "DESC" as value.
400_badRequest.proximity.filter: The parameters provided in the proximity filter have the wrong format, it should be ?proximity=50.43321,3.03943.
400_badRequest.user.search.filter: Wrong format provided for user search, should be a string as ?userSearch=raphael.
400_badRequest.repairer.search.filter: Wrong format provided for repairer search, should be a string as ?repairerSearch=raphael.
400_badRequest.around.filter: Wrong format provided for the around filter, should be ?around[cityName]=latitude,longitude.
400_badRequest.validation.code: You should provide a code to validate it.
400_badRequest.appointment.transition: You should provide a transition name.
400_badRequest.appointment.transition.not.available: This transition is currently not available.
400_badRequest.appointment.transition.slotTime: You should provide a new slotTime in your body request for the transition %transition%.
400_badRequest.around.filter.resource.class: Your resource class %resource% has no latitude or longitude property.

#Not Found Exceptions

404_notFound.repairer.employee: This repairer employee does not exist.
404_notFound.customer: There's no customer for you.
404_notFound.boss: No boss found.
404_notFound.intervention: Intervention with id %id% not found.

#HTTP UNAUTHORIZED
401_invalid.credentials: Invalid credentials.

#Forgot password
400_no_email: Thanks to provide a valid email
400_email_unknown: This email is not registered on our platform
400_no_token: You cannot update this password
400_no_password: You should provide a valid password
