name: Deploy

on:
  workflow_call:
    secrets:
      kubeconfig:
        description: kubeconfig stored as a base64 encrypted secret
        required: true
      domain:
        description: Main project deploy domain used in URLs
        required: true
      mailer-dsn:
          description: MAILER DSN

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    timeout-minutes: 15
    #permissions:
    #  contents: 'read'
    #  id-token: 'write'
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set kubeconfig
        run: |
          mkdir ~/.kube
          echo ${{ secrets.kubeconfig }} | base64 -d > ~/.kube/config
          kubectl config view

      # https://github.com/helm/helm/issues/8036
      - name: Build helm dependencies
        run: |
          set -o pipefail
          # add all repos
          if [ -f "./helm/chart/Chart.lock" ]; then
            yq --indent 0 '.dependencies | map(["helm", "repo", "add", .name, .repository] | join(" ")) | .[]' "./helm/chart/Chart.lock"  | sh --;
          fi
          helm dependency build ./helm/chart

      - name: Deploy on namespace
        id: deploy
        run: |
          set -o pipefail
          if [[ "${{ github.ref }}" == *"tag"* ]]; then
              # Tags are deployed in prod
              CONTEXT=prod
              IMAGE_TAG=${{ github.ref_name }}
              RELEASE_NAME=demo             
              URL=demo.${{ secrets.domain }}; 
          else
              CONTEXT=nonprod
              IMAGE_TAG=sha-${GITHUB_SHA::7}
              if [ "$GITHUB_EVENT_NAME" == "pull_request" ]; then
                  RELEASE_NAME=pr-$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
              else
                  RELEASE_NAME=${{ github.ref_name }}
              fi
              URL=${RELEASE_NAME}.nonprod.${{ secrets.domain }}
          fi
          export APP_APP_JWT_PUBLIC_KEY=$(openssl rand -base64 32)
          export APP_JWT_SECRET_KEY=$(openssl genpkey -pass file:<(echo "$APP_APP_JWT_PUBLIC_KEY") -aes256 -algorithm rsa -pkeyopt rsa_keygen_bits:4096)
          export APP_JWT_PUBLIC_KEY=$(openssl pkey -in <(echo "$APP_JWT_SECRET_KEY") -passin file:<(echo "$APP_APP_JWT_PUBLIC_KEY") -pubout)
          export TRUSTED_HOSTS="^127.0.0.1|localhost|${URL}|${RELEASE_NAME}-bikelib$"
          export MERCURE_JWT_PUBLIC_KEY=$(openssl genpkey -pass file:<(echo "$APP_JWT_PASSPHRASE") -aes256 -algorithm rsa -pkeyopt rsa_keygen_bits:4096)
          export MERCURE_EXTRA_DIRECTIVES=$(cat <<EOF
          cors_origins http://localhost:8080 http://localhost:8081 https://localhost http://localhost https://${URL}
          EOF
          )
          helm upgrade --install $RELEASE_NAME ./helm/chart \
            --atomic \
            --debug \
            --kube-context $CONTEXT \
            --set=php.image.tag=${IMAGE_TAG} \
            --set=caddy.image.tag=${IMAGE_TAG} \
            --set=pwa.image.tag=${IMAGE_TAG} \
            --set=ingress.hosts[0].host=${URL} \
            --set=ingress.tls[0].secretName=${RELEASE_NAME}-tls \
            --set=ingress.tls[0].hosts[0]=${URL} \
            --set=php.corsAllowOrigin="https?://.*?\.${URL}$" \
            --set=mailer.dsn='${{ secrets.mailer-dsn }}' \
            --set=php.corsAllowOrigin="https?://${URL}$" \
            --set=php.trustedHosts="${TRUSTED_HOSTS//./\\\\.}" \
            --set=php.jwt.secretKey="${APP_JWT_SECRET_KEY}" \
            --set=php.jwt.publicKey="${APP_JWT_PUBLIC_KEY}" \
            --set=php.jwt.passphrase=${APP_APP_JWT_PUBLIC_KEY} \
            --set=php.host=${URL} \
            --set=mercure.publicUrl=https://${URL}/.well-known/mercure \
            --set=mercure.jwtSecret="${MERCURE_JWT_PUBLIC_KEY}" \
            --set=mercure.extraDirectives="${MERCURE_EXTRA_DIRECTIVES}" \
            --values ./helm/chart/values.yml \
            --values ./helm/chart/values-prod.yml \
            | sed --unbuffered '/USER-SUPPLIED VALUES/,$d'
          echo "URL=$URL" >> $GITHUB_OUTPUT

      - name: Output deployment URL
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          URL: ${{ steps.deploy.outputs.URL }}
        with:
          script: |
            const { URL } = process.env
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `Chart has been deployed with this url:\n\`\`\`\n${URL}\n\`\`\``
            })
